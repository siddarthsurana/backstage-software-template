name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'main.go'

env:
  REGISTRY: docker.io
  IMAGE_NAME: sssurana90/${{ values.app_name }}
  ARGOCD_SERVER: argocd-server.argocd
  ARGOCD_APP_NAME: ${{ values.app_name }}
  ARGOCD_INSECURE: "true"  # Add this for development/testing

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'
          
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'
          
      - name: Run tests
        run: go test -v ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{'${{ secrets.DOCKERHUB_USERNAME }}'}}
          password: ${{'${{ secrets.DOCKERHUB_TOKEN }}'}}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{'${{ env.REGISTRY }}'}}/${{'${{ env.IMAGE_NAME }}'}}
          tags: |
            type=raw,value=latest
            type=sha,format=short
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{'${{ steps.meta.outputs.tags }}'}}
          labels: ${{'${{ steps.meta.outputs.labels }}'}}
          platforms: linux/amd64,linux/arm64

  update-helm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Update Helm chart
        run: |
          # Update the image tag in values.yaml
          SHORT_SHA=$(echo ${{'${{ github.sha }}'}} | cut -c1-7)
          sed -i "s|repository: .*|repository: ${{ '${{ env.REGISTRY }}'}}/${{'${{ env.IMAGE_NAME }}'}}|g" helm/${{ values.app_name }}/values.yaml
          sed -i "s|tag: .*|tag: sha-$SHORT_SHA|g" helm/${{ values.app_name }}/values.yaml

          
          # Package the Helm chart
          helm package helm/${{ values.app_name }}
          helm repo index .
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add helm/${{ values.app_name }}/values.yaml
          git commit -m "Update image to ${{'${{ env.REGISTRY }}'}}/${{'${{ env.IMAGE_NAME }}'}}:sha-${{'${{ github.sha }}'}}"
          git push

  deploy-argocd:
    needs: update-helm
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          
      - name: Login to ArgoCD
        run: |
          argocd login ${{'${{ env.ARGOCD_SERVER }}'}} \
            --username ${{'${{ secrets.ARGOCD_USERNAME }}'}} \
            --password ${{'${{ secrets.ARGOCD_PASSWORD }}'}} \
            --insecure

      - name: Check Repo and add application if not exists
        run: |
          argocd repo list | grep -q https://github.com/${{'${{ github.repository }}'}} || argocd repo add https://github.com/${{'${{ github.repository }}'}}
          if ! argocd app get ${{'${{ env.ARGOCD_APP_NAME }}'}} &>/dev/null; then
            argocd app create ${{'${{ env.ARGOCD_APP_NAME }}'}} \
              --repo https://github.com/${{'${{ github.repository }}'}} \
              --path helm/${{ values.app_name }} \
              --values helm/${{ values.app_name }}/values.yaml \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace ${{ values.app_env }} \
              --revision master \
              --sync-policy manual \
              --sync-option CreateNamespace=true
          fi

      - name: Sync ArgoCD Application
        run: |
          argocd app sync ${{'${{ env.ARGOCD_APP_NAME }}'}} \
            --force \
            --prune \
            --timeout 300
          
      - name: Wait for Sync
        run: |
          argocd app wait ${{'${{ env.ARGOCD_APP_NAME }}'}} \
            --health \
            --timeout 300 